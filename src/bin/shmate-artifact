#!/usr/bin/env bash

# shellcheck disable=SC2039

export SHMATE_INSTALL_DIR="${SHMATE_INSTALL_DIR:-$(realpath "$(dirname "$(realpath "$0")")/..")}"
export SHMATE_LIB_DIR="${SHMATE_LIB_DIR:-"${SHMATE_INSTALL_DIR}/lib/shmate"}"

#> >>> shmate-artifact
#>
#> Artifact repository client. Can be used to integrate with various Maven 2 style repositories.
#>

. "${SHMATE_LIB_DIR}/dependency.sh"

help() {
    echo "
Usage: ${0##*/} <task> [<task_arg> ...]

        Artifact repository client. Can be used to integrate with various Maven 2 style repositories.

        Uses Gradle style <artifact_descriptor>, i.e.
            <group_id>:<artifact_id>:<version>[:<classifier>]@<packaging>
        e.g.
            org.slf4j:slf4j-api:2.0.12@jar

        Tasks:
            check [-r <artifact_repo>] [<artifact_descriptor>[</path/inside/archive>] ...]
            fetch [-C <directory>] [-t <target_path>] [-r <artifact_repo>] [<artifact_descriptor>[</path/inside/archive>] ...]

Usage: ${0##*/} <task> -h

        Prints <task> related help message.

Usage: ${0##*/} -h

        Prints this help message.
"
}

help_check() {
    echo "
Usage: ${0##*/} check [-r <artifact_repo>] [<artifact_descriptor>[</path/inside/archive>] ...]

        Checks if artifacts described with <artifact_descriptor> exist in remote Maven repository <artifact_repo>.
        Returns zero if all the artifacts are found and non-zero otherwise.
        Does not require Maven or Java.

        The </path/inside/archive> is ignored and is present only for compatibility with 'fetch' task.

        Options:
            -q
                Does not print log messages stating if the artifact is found or not.
            -r <artifact_repo>
                Maven repository base URL or one of the configured aliases in \"\${SHMATE_CONF_DIR}/artifact.conf\".
                The aliases are just variables with 'repository_' prefix, i.e. 'repository_<artifact_repo>'.
                Defaults to 'default'.

        Example:
            To check if 'org.slf4j:slf4j-api:2.0.12@jar' artifact exists in default repository:

            \$ ${0##*/} check 'org.slf4j:slf4j-api:2.0.12@jar'
"
}

help_fetch() {
    echo "
Usage: ${0##*/} fetch [-C <directory>] [-t <target_path>] [-r <artifact_repo>] [<artifact_descriptor>[</path/inside/archive>] ...]

        Fetches artifacts described with <artifact_descriptor> from remote Maven repository <artifact_repo>
        and possibly extracts their contents to <target_path> in current directory.
        Does not require Maven or Java.

        If </path/inside/archive> is given and <packaging> is recognized as known archive format (i.e. .tar.gz, .tgz,
        .zip, .jar), the </path/inside/archive> is extracted from the artifact and placed under <target_path>. Without
        </path/inside/archive> the artifact is just downloaded and renamed to <target_path> unless <target_path> denotes
        a directory (i.e. ends with '/' or is '.') resulting artifact being placed in it.

        Options:
            -C <directory>
                Changes current directory to <directory> before execution.
            -t <target_path>
                Path where the artifact will be downloaded/extracted. The <target_path> will be created if it does not
                exist. If it ends with '/' or is '.', it denotes a directory affecting artifact processing.
                Defaults to '.'.
            -r <artifact_repo>
                Maven repository base URL or one of the configured aliases in \"\${SHMATE_CONF_DIR}/${0##*/}.conf\".
                The aliases are just variables with 'repository_' prefix, i.e. 'repository_<artifact_repo>'.
                Defaults to 'default'.

        Example:
            To download 'org.slf4j:slf4j-api:2.0.12@jar' artifact from 'example' repository and extract
            'META-INF/MANIFEST.MF' from the JAR to 'manifest.txt':

            \$ ${0##*/} fetch -t 'manifest.txt' 'org.slf4j:slf4j-api:2.0.12@jar/META-INF/MANIFEST.MF'
"
}

find_artifact_source() {
    local artifact_source="$1"

    case "${artifact_source}" in
        'http://'*|'https://'*)
            ;;
        *)
            artifact_source=$(echo -n "${artifact_source}" | tr -Cs '[:alnum:]' '_')
            local config_file="${SHMATE_CONF_DIR}/artifact.conf"
            if [ -s "${config_file}" ]; then
                . "${config_file}" || return $?
            fi

            local var_repository=
            eval var_repository='$'repository_${artifact_source}

            test -n "${var_repository}"
            shmate_assert "Variable \"repository_${artifact_source}\" is not set in \"${config_file}\"" || return $?

            artifact_source="${var_repository}"
            ;;
    esac

    echo "${artifact_source}"

    return 0
}

check_artifact() {
    local artifact_source="$1"
    local artifact_descriptor="$2"
    local is_quiet="$3"
    local artifact_repo_path=
    local artifact_dir=

    artifact_dir=`shmate_input_run "${artifact_descriptor}" sed -En 's|.*@[^/]+(.*)|\1|p'` || return $?
    if [ -n "${artifact_dir}" ]; then
        artifact_descriptor="${artifact_descriptor%${artifact_dir}}"
    fi

    shmate_log_debug "Using artifact descriptor \"${artifact_descriptor}\""

    artifact_repo_path=$(shmate_dep_repo_path "${artifact_descriptor}")
    shmate_assert "Invalid dependency descriptor \"${artifact_descriptor}\"" || return $?

    artifact_source=$(find_artifact_source "${artifact_source}") || return $?

    artifact_source="${artifact_source}/${artifact_repo_path}"

    set -- curl -L --silent --fail --head "${artifact_source}" -o /dev/null
    if ${is_quiet}; then
        shmate_audit "$@" || shmate_exit $?
    else
        shmate_audit "$@"
        shmate_warning_assert "Artifact \"${artifact_source}\" not found" || return $?

        shmate_log_info "Found artifact \"${artifact_source}\""
    fi

    return 0
}

fetch_artifact() {
    local target_path="$1"
    local artifact_source="$2"
    local artifact_descriptor="$3"
    local artifact_repo_path=
    local artifact_dir=

    artifact_dir=`shmate_input_run "${artifact_descriptor}" sed -En 's|.*@[^/]+(.*)|\1|p'` || return $?
    if [ -n "${artifact_dir}" ]; then
        artifact_descriptor="${artifact_descriptor%${artifact_dir}}"
        shmate_log_debug "Using artifact descriptor \"${artifact_descriptor}\" and artifact contents from \"${artifact_dir}\""
    else
        shmate_log_debug "Using artifact descriptor \"${artifact_descriptor}\""
    fi

    artifact_repo_path=$(shmate_dep_repo_path "${artifact_descriptor}")
    shmate_assert "Invalid dependency descriptor \"${artifact_descriptor}\"" || return $?

    artifact_source=$(find_artifact_source "${artifact_source}")  || return $?

    artifact_source="${artifact_source}/${artifact_repo_path}"

    shmate_log_info "Fetching artifact \"${artifact_source}\""

    if [ -z "${artifact_dir}" ]; then
        local artifact_file=
        artifact_file=$(shmate_dep_file_name "${artifact_descriptor}")
        shmate_assert "Invalid dependency descriptor \"${artifact_descriptor}\"" || return $?

        local target_file=
        case "${target_path}" in
            */)
                target_file="${target_path}${artifact_file}"
                ;;
            .)
                target_file="${artifact_file}"
                ;;
            *)
                target_file="${target_path}"
                ;;
        esac

        shmate_audit curl -L --fail --create-dirs "${artifact_source}" -o "${target_file}"
        shmate_assert "Fetching artifact from \"${artifact_source}\" to \"${target_file}\"" || return $?
    else
        artifact_dir="${artifact_dir#/}"
        artifact_dir="${artifact_dir%/}"

        local artifact_packaging=
        artifact_packaging=$(shmate_dep_packaging "${artifact_descriptor}" | tr '[:upper:]' '[:lower:]')
        shmate_assert "Invalid dependency descriptor \"${artifact_descriptor}\"" || return $?

        case "${artifact_packaging}" in
            tgz|tar.gz)
                shmate_assert_tools tar || return $?

                local artifact_pattern=
                if [ -n "${artifact_dir}" ]; then
                    artifact_pattern="${artifact_dir}/*"
                else
                    artifact_pattern="*"
                fi

                shmate_audit mkdir -p "${target_path}"
                shmate_assert "Creating target directory \"${target_path}\"" || return $?

                shmate_log_audit_begin && \
                    shmate_log_audit_command curl -L --fail "${artifact_source}" -o - && \
                    shmate_log_audit_operator '|' && \
                    shmate_log_audit_command tar -C "${target_path}" -xzf - --transform "s|^${artifact_dir}/||" --wildcards --wildcards-match-slash --anchored "${artifact_pattern}" && \
                    shmate_log_audit_end
                # GNU tar extension
                curl -L --fail "${artifact_source}" -o - | tar -C "${target_path}" -xzf - --transform "s|^${artifact_dir}/||" --wildcards --wildcards-match-slash --anchored "${artifact_pattern}"
                shmate_assert "Fetching artifact from \"${artifact_source}\" and extracting \"${artifact_pattern}\"" || return $?
                ;;
            zip|jar)
                shmate_assert_tools unzip || return $?

                local artifact_file=
                artifact_file=$(shmate_dep_file_name "${artifact_descriptor}")
                shmate_assert "Invalid dependency descriptor \"${artifact_descriptor}\"" || return $?

                shmate_audit curl -L --fail --create-dirs "${artifact_source}" -o "${artifact_file}"
                shmate_assert "Fetching artifact from \"${artifact_source}\" to \"${artifact_file}\"" || return $?

                if [ -z "${artifact_dir}" ]; then
                    shmate_audit mkdir -p "${target_path}" && shmate_audit unzip -qod "${target_path}" "${artifact_file}"
                    shmate_assert "Extracting artifact \"${artifact_file}\" to \"${target_path}\"" || return $?
                else
                    local tmp_dir=".${artifact_file}"

                    shmate_audit unzip -qod "${tmp_dir}" "${artifact_file}"
                    shmate_assert "Extracting artifact \"${artifact_file}\" to temporary directory \"${tmp_dir}\"" || return $?

                    local target_dir="${target_path%/*}"
                    if [ -n "${target_dir}" -a "${target_dir}" != "${target_path}" ]; then
                        shmate_audit mkdir -p "${target_dir}"
                        shmate_assert "Creating target directory \"${target_dir}\"" || return $?
                    fi

                    shmate_audit cp -RfT "${tmp_dir}/${artifact_dir}" "${target_path}"
                    shmate_assert "Copying extracted directory \"${tmp_dir}/${artifact_dir}\" to \"${target_path}\"" || return $?

                    shmate_audit rm -rf "${tmp_dir}"
                fi

                shmate_audit rm -f "${artifact_file}"
                ;;
            *)
                shmate_log_error "Don't know how to extract \"${artifact_packaging}\" format of \"$(shmate_dep_file_name "${artifact_descriptor}")\""
                return 1
                ;;
        esac
    fi

    return 0
}

task_check() {
    shmate_assert_tools curl || return $?

    local arg_artifact_source='default'
    local arg_quiet=false

    while shmate_getopts 'qr:' "$@"; do
        case ${shmate_getopts_option} in
            q)
                arg_quiet=true
                ;;
            r)
                arg_artifact_source="${OPTARG}"
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local artifact_descriptor=
    for artifact_descriptor in "$@"; do
        check_artifact "${arg_artifact_source}" "${artifact_descriptor}" "${arg_quiet}" || return $?
    done || return $?

    return 0
}

task_fetch() {
    shmate_assert_tools curl || return $?

    local arg_work_dir=
    local arg_target_path='.'
    local arg_artifact_source='default'

    while shmate_getopts 'C:t:r:' "$@"; do
        case ${shmate_getopts_option} in
            C)
                arg_work_dir="${OPTARG}"
                ;;
            t)
                arg_target_path="${OPTARG}"
                ;;
            r)
                arg_artifact_source="${OPTARG}"
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ -n "${arg_work_dir}" ]; then
        if ! [ -e "${arg_work_dir}" ]; then
            shmate_audit mkdir -p "${arg_work_dir}"
            shmate_assert "Creating working directory to \"${arg_work_dir}\"" || return $?
        fi
        shmate_audit cd "${arg_work_dir}"
        shmate_assert "Changing current working directory to \"${arg_work_dir}\"" || return $?
    fi

    local artifact_descriptor=
    for artifact_descriptor in "$@"; do
        fetch_artifact "${arg_target_path}" "${arg_artifact_source}" "${artifact_descriptor}" || return $?
    done || return $?

    return 0
}

main() {
    shmate_getopts '' "$@"
    shift $((OPTIND - 1))

    shmate_task "$@"
}

shmate_main "$@"
